syntax = "proto3";

package payment;

service PaymentService {
  // Process a payment for an order
  rpc ProcessPayment(ProcessPaymentRequest) returns (PaymentResponse);
  
  // Get payment transaction details
  rpc GetTransaction(GetTransactionRequest) returns (PaymentResponse);
  
  // Refund a payment
  rpc RefundPayment(RefundRequest) returns (PaymentResponse);
  
  // Get payment history for a customer
  rpc GetCustomerPayments(GetCustomerPaymentsRequest) returns (PaymentList);
  
  // Verify payment method
  rpc VerifyPaymentMethod(VerifyPaymentMethodRequest) returns (VerificationResponse);
}

message ProcessPaymentRequest {
  string order_id = 1;
  string customer_id = 2;
  double amount = 3;
  PaymentMethod payment_method = 4;
  string payment_token = 5;  // For card/digital payments
}

message GetTransactionRequest {
  string transaction_id = 1;
}

message RefundRequest {
  string transaction_id = 1;
  double amount = 2;
  string reason = 3;
}

message GetCustomerPaymentsRequest {
  string customer_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message VerifyPaymentMethodRequest {
  string customer_id = 1;
  PaymentMethod payment_method = 2;
  string payment_token = 3;
}

message PaymentResponse {
  string transaction_id = 1;
  string order_id = 2;
  string customer_id = 3;
  double amount = 4;
  PaymentMethod payment_method = 5;
  PaymentStatus status = 6;
  string created_at = 7;
  string updated_at = 8;
  string error_message = 9;
}

message PaymentList {
  repeated PaymentResponse payments = 1;
  int32 total_count = 2;
}

message VerificationResponse {
  bool is_valid = 1;
  string error_message = 2;
}

enum PaymentMethod {
  CREDIT_CARD = 0;
  DEBIT_CARD = 1;
  DIGITAL_WALLET = 2;
  CASH_ON_DELIVERY = 3;
}

enum PaymentStatus {
  PAYMENT_PENDING = 0;
  PAYMENT_PROCESSING = 1;
  PAYMENT_COMPLETED = 2;
  PAYMENT_FAILED = 3;
  PAYMENT_REFUNDED = 4;
}